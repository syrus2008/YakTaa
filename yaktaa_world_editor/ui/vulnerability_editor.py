#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Module d'u00e9dition des vulnu00e9rabilitu00e9s dans l'u00e9diteur de monde YakTaa
"""

import logging
import json
from PyQt6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QFormLayout,
    QLineEdit, QTextEdit, QComboBox, QSpinBox,
    QPushButton, QLabel, QDialogButtonBox
)
from PyQt6.QtCore import Qt

logger = logging.getLogger(__name__)

class VulnerabilityEditor(QDialog):
    """Dialogue d'u00e9dition d'une vulnu00e9rabilitu00e9"""
    
    def __init__(self, db, world_id, vulnerability_id=None, parent=None):
        super().__init__(parent)
        
        self.db = db
        self.world_id = world_id
        self.vulnerability_id = vulnerability_id
        self.vulnerability_data = None
        
        self.setWindowTitle("u00c9diteur de Vulnu00e9rabilitu00e9")
        self.resize(600, 500)
        
        self.init_ui()
        
        if self.vulnerability_id:
            self.load_vulnerability_data()
        
    def init_ui(self):
        """Initialise l'interface utilisateur"""
        
        # Layout principal
        main_layout = QVBoxLayout(self)
        
        # Formulaire
        form_layout = QFormLayout()
        
        # Nom de code
        self.code_name_edit = QLineEdit()
        form_layout.addRow("Nom de code:", self.code_name_edit)
        
        # Description
        self.description_edit = QTextEdit()
        form_layout.addRow("Description:", self.description_edit)
        
        # Type de vulnu00e9rabilitu00e9
        self.vuln_type_combo = QComboBox()
        vuln_types = [
            "buffer_overflow", "sql_injection", "xss", "command_injection", "backdoor", 
            "malware", "zero_day", "misconfiguration", "default_credential", "denial_of_service", 
            "race_condition", "authentication_bypass", "crypto_weakness"
        ]
        self.vuln_type_combo.addItems(vuln_types)
        form_layout.addRow("Type de vulnu00e9rabilitu00e9:", self.vuln_type_combo)
        
        # Niveau de difficultu00e9
        self.difficulty_spin = QSpinBox()
        self.difficulty_spin.setRange(1, 10)
        self.difficulty_spin.setValue(5)
        form_layout.addRow("Difficultu00e9 d'exploitation:", self.difficulty_spin)
        
        # Impact potentiel
        self.impact_spin = QSpinBox()
        self.impact_spin.setRange(1, 10)
        self.impact_spin.setValue(5)
        form_layout.addRow("Impact potentiel:", self.impact_spin)
        
        # CVE (Common Vulnerabilities and Exposures)
        self.cve_edit = QLineEdit()
        self.cve_edit.setPlaceholderText("CVE-YYYY-NNNN")
        form_layout.addRow("CVE (facultatif):", self.cve_edit)
        
        # Cible principale
        self.target_type_combo = QComboBox()
        target_types = ["device", "software", "network", "os", "firmware", "hardware"]
        self.target_type_combo.addItems(target_types)
        form_layout.addRow("Type de cible:", self.target_type_combo)
        
        # Exigences/pru00e9requis pour l'exploitation
        self.requirements_edit = QTextEdit()
        form_layout.addRow("Exigences d'exploitation:\n(un par ligne)", self.requirements_edit)
        
        # Charges utiles/exploits
        self.payloads_edit = QTextEdit()
        form_layout.addRow("Charges utiles/exploits:\n(un par ligne)", self.payloads_edit)
        
        # Ru00e9compenses possibles
        self.rewards_edit = QTextEdit()
        form_layout.addRow("Ru00e9compenses possibles:\n(un par ligne)", self.rewards_edit)
        
        # Raretu00e9
        self.rarity_combo = QComboBox()
        rarities = ["commun", "peu commun", "rare", "u00e9pique", "lu00e9gendaire", "unique"]
        self.rarity_combo.addItems(rarities)
        form_layout.addRow("Raretu00e9:", self.rarity_combo)
        
        # Emplacement initial
        self.location_type_combo = QComboBox()
        location_types = ["device", "software", "network", "file", "quest"]
        self.location_type_combo.addItems(location_types)
        form_layout.addRow("Type d'emplacement:", self.location_type_combo)
        
        # ID d'emplacement
        self.location_id_edit = QLineEdit()
        form_layout.addRow("ID d'emplacement:", self.location_id_edit)
        
        main_layout.addLayout(form_layout)
        
        # Boutons
        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        button_box.accepted.connect(self.accept)
        button_box.rejected.connect(self.reject)
        main_layout.addWidget(button_box)
    
    def load_vulnerability_data(self):
        """Charge les donnu00e9es de la vulnu00e9rabilitu00e9"""
        try:
            cursor = self.db.conn.cursor()
            cursor.execute(
                "SELECT * FROM vulnerabilities WHERE id = ? AND world_id = ?",
                (self.vulnerability_id, self.world_id)
            )
            vulnerability = cursor.fetchone()
            if vulnerability:
                self.vulnerability_data = dict(vulnerability)
                
                # Remplir les champs
                self.code_name_edit.setText(self.vulnerability_data["code_name"])
                self.description_edit.setText(self.vulnerability_data.get("description", ""))
                
                # Trouver l'index du type de vulnu00e9rabilitu00e9 dans la combobox
                vuln_type = self.vulnerability_data.get("vuln_type", "buffer_overflow")
                index = self.vuln_type_combo.findText(vuln_type)
                if index >= 0:
                    self.vuln_type_combo.setCurrentIndex(index)
                
                self.difficulty_spin.setValue(self.vulnerability_data.get("difficulty", 5))
                self.impact_spin.setValue(self.vulnerability_data.get("impact", 5))
                self.cve_edit.setText(self.vulnerability_data.get("cve", ""))
                
                # Trouver l'index du type de cible dans la combobox
                target_type = self.vulnerability_data.get("target_type", "device")
                index = self.target_type_combo.findText(target_type)
                if index >= 0:
                    self.target_type_combo.setCurrentIndex(index)
                
                # Exigences
                try:
                    requirements = json.loads(self.vulnerability_data.get("requirements", "[]"))
                    self.requirements_edit.setText("\n".join(requirements))
                except (json.JSONDecodeError, TypeError):
                    self.requirements_edit.setText("")
                
                # Charges utiles
                try:
                    payloads = json.loads(self.vulnerability_data.get("payloads", "[]"))
                    self.payloads_edit.setText("\n".join(payloads))
                except (json.JSONDecodeError, TypeError):
                    self.payloads_edit.setText("")
                
                # Ru00e9compenses
                try:
                    rewards = json.loads(self.vulnerability_data.get("rewards", "[]"))
                    self.rewards_edit.setText("\n".join(rewards))
                except (json.JSONDecodeError, TypeError):
                    self.rewards_edit.setText("")
                
                # Trouver l'index de la raretu00e9 dans la combobox
                rarity = self.vulnerability_data.get("rarity", "commun")
                index = self.rarity_combo.findText(rarity)
                if index >= 0:
                    self.rarity_combo.setCurrentIndex(index)
                
                # Trouver l'index du type d'emplacement dans la combobox
                location_type = self.vulnerability_data.get("location_type", "device")
                index = self.location_type_combo.findText(location_type)
                if index >= 0:
                    self.location_type_combo.setCurrentIndex(index)
                
                self.location_id_edit.setText(self.vulnerability_data.get("location_id", ""))
            
        except Exception as e:
            logger.error(f"Erreur lors du chargement des donnu00e9es de la vulnu00e9rabilitu00e9: {str(e)}")
    
    def get_vulnerability_data(self):
        """Ru00e9cupu00e8re les donnu00e9es du formulaire"""
        data = {
            "code_name": self.code_name_edit.text(),
            "description": self.description_edit.toPlainText(),
            "vuln_type": self.vuln_type_combo.currentText(),
            "difficulty": self.difficulty_spin.value(),
            "impact": self.impact_spin.value(),
            "cve": self.cve_edit.text(),
            "target_type": self.target_type_combo.currentText(),
            "requirements": json.dumps([r.strip() for r in self.requirements_edit.toPlainText().split('\n') if r.strip()]),
            "payloads": json.dumps([p.strip() for p in self.payloads_edit.toPlainText().split('\n') if p.strip()]),
            "rewards": json.dumps([r.strip() for r in self.rewards_edit.toPlainText().split('\n') if r.strip()]),
            "rarity": self.rarity_combo.currentText(),
            "location_type": self.location_type_combo.currentText(),
            "location_id": self.location_id_edit.text()
        }
        return data
    
    def accept(self):
        """Validation et sauvegarde"""
        if not self.code_name_edit.text().strip():
            from PyQt6.QtWidgets import QMessageBox
            QMessageBox.warning(self, "Champ obligatoire", "Le nom de code de la vulnu00e9rabilitu00e9 est obligatoire.")
            return
        
        super().accept()
