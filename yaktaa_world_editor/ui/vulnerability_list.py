#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Module de liste et gestion des vulnu00e9rabilitu00e9s dans l'u00e9diteur de monde YakTaa
"""

import logging
import uuid
import json
from PyQt6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QListWidget, 
    QPushButton, QLabel, QMessageBox, QListWidgetItem
)
from PyQt6.QtCore import Qt, pyqtSignal
from PyQt6.QtGui import QIcon

from ui.vulnerability_editor import VulnerabilityEditor

logger = logging.getLogger(__name__)

class VulnerabilityList(QWidget):
    """Widget de liste et gestion des vulnu00e9rabilitu00e9s"""
    
    vulnerability_selected = pyqtSignal(str)
    
    def __init__(self, db, world_id):
        super().__init__()
        
        self.db = db
        self.world_id = world_id
        
        self.init_ui()
        self.load_vulnerabilities()
    
    def init_ui(self):
        """Initialise l'interface utilisateur"""
        
        # Layout principal
        main_layout = QVBoxLayout(self)
        
        # Label titre
        title_label = QLabel("Vulnu00e9rabilitu00e9s")
        title_label.setStyleSheet("font-weight: bold; font-size: 14px;")
        main_layout.addWidget(title_label)
        
        # Liste des vulnu00e9rabilitu00e9s
        self.vulnerability_list = QListWidget()
        self.vulnerability_list.itemClicked.connect(self.on_vulnerability_selected)
        main_layout.addWidget(self.vulnerability_list)
        
        # Boutons d'action
        button_layout = QHBoxLayout()
        
        self.add_button = QPushButton("Ajouter")
        self.add_button.clicked.connect(self.add_vulnerability)
        button_layout.addWidget(self.add_button)
        
        self.edit_button = QPushButton("u00c9diter")
        self.edit_button.clicked.connect(self.edit_vulnerability)
        self.edit_button.setEnabled(False)
        button_layout.addWidget(self.edit_button)
        
        self.delete_button = QPushButton("Supprimer")
        self.delete_button.clicked.connect(self.delete_vulnerability)
        self.delete_button.setEnabled(False)
        button_layout.addWidget(self.delete_button)
        
        main_layout.addLayout(button_layout)
    
    def load_vulnerabilities(self):
        """Charge la liste des vulnu00e9rabilitu00e9s"""
        try:
            self.vulnerability_list.clear()
            
            cursor = self.db.conn.cursor()
            cursor.execute(
                "SELECT id, code_name, vuln_type, difficulty, impact, rarity FROM vulnerabilities WHERE world_id = ? ORDER BY code_name",
                (self.world_id,)
            )
            
            vulnerabilities = cursor.fetchall()
            
            for vuln in vulnerabilities:
                # Formatage du texte avec le level de difficultu00e9 et d'impact
                item = QListWidgetItem(f"{vuln['code_name']} ({vuln['vuln_type']}) [D:{vuln['difficulty']}/I:{vuln['impact']}]")
                item.setData(Qt.ItemDataRole.UserRole, vuln['id'])
                
                # Ajouter une couleur selon la raretu00e9
                rarity = vuln['rarity'] if 'rarity' in vuln.keys() else 'commun'
                if rarity == 'commun':
                    item.setForeground(Qt.GlobalColor.white)
                elif rarity == 'peu commun':
                    item.setForeground(Qt.GlobalColor.green)
                elif rarity == 'rare':
                    item.setForeground(Qt.GlobalColor.blue)
                elif rarity == 'u00e9pique':
                    item.setForeground(Qt.GlobalColor.magenta)
                elif rarity == 'lu00e9gendaire' or rarity == 'unique':
                    item.setForeground(Qt.GlobalColor.yellow)
                
                # Couleur de fond selon le type de vulnu00e9rabilitu00e9
                vuln_type = vuln['vuln_type'] if 'vuln_type' in vuln.keys() else ''
                if vuln_type in ['zero_day', 'backdoor']:
                    item.setBackground(Qt.GlobalColor.darkRed)  # Dangereux
                elif vuln_type in ['denial_of_service', 'authentication_bypass']:
                    item.setBackground(Qt.GlobalColor.darkMagenta)  # Perturbateur
                elif vuln_type in ['malware', 'command_injection']:
                    item.setBackground(Qt.GlobalColor.darkGreen)  # Offensif
                
                self.vulnerability_list.addItem(item)
                
        except Exception as e:
            logger.error(f"Erreur lors du chargement des vulnu00e9rabilitu00e9s: {str(e)}")
    
    def on_vulnerability_selected(self, item):
        """Gu00e8re la su00e9lection d'une vulnu00e9rabilitu00e9"""
        vulnerability_id = item.data(Qt.ItemDataRole.UserRole)
        self.vulnerability_selected.emit(vulnerability_id)
        
        self.edit_button.setEnabled(True)
        self.delete_button.setEnabled(True)
    
    def add_vulnerability(self):
        """Ajoute une nouvelle vulnu00e9rabilitu00e9"""
        dialog = VulnerabilityEditor(self.db, self.world_id, parent=self)
        if dialog.exec():
            try:
                vulnerability_data = dialog.get_vulnerability_data()
                vulnerability_id = f"vuln_{uuid.uuid4().hex[:8]}"
                
                cursor = self.db.conn.cursor()
                cursor.execute(
                    """INSERT INTO vulnerabilities 
                       (id, world_id, code_name, description, vuln_type, 
                        difficulty, impact, cve, target_type, 
                        requirements, payloads, rewards, rarity, 
                        location_type, location_id)
                       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
                    (vulnerability_id, self.world_id, vulnerability_data["code_name"], 
                     vulnerability_data["description"], vulnerability_data["vuln_type"],
                     vulnerability_data["difficulty"], vulnerability_data["impact"],
                     vulnerability_data["cve"], vulnerability_data["target_type"],
                     vulnerability_data["requirements"], vulnerability_data["payloads"],
                     vulnerability_data["rewards"], vulnerability_data["rarity"],
                     vulnerability_data["location_type"], vulnerability_data["location_id"])
                )
                
                self.db.conn.commit()
                self.load_vulnerabilities()
                
                logger.info(f"Vulnu00e9rabilitu00e9 ajoutu00e9e: {vulnerability_data['code_name']}")
                
            except Exception as e:
                self.db.conn.rollback()
                logger.error(f"Erreur lors de l'ajout de la vulnu00e9rabilitu00e9: {str(e)}")
                QMessageBox.critical(self, "Erreur", f"Impossible d'ajouter la vulnu00e9rabilitu00e9: {str(e)}")
    
    def edit_vulnerability(self):
        """Modifie une vulnu00e9rabilitu00e9 existante"""
        selected_items = self.vulnerability_list.selectedItems()
        if not selected_items:
            return
            
        vulnerability_id = selected_items[0].data(Qt.ItemDataRole.UserRole)
        
        dialog = VulnerabilityEditor(self.db, self.world_id, vulnerability_id, parent=self)
        if dialog.exec():
            try:
                vulnerability_data = dialog.get_vulnerability_data()
                
                cursor = self.db.conn.cursor()
                cursor.execute(
                    """UPDATE vulnerabilities 
                       SET code_name = ?, description = ?, vuln_type = ?, 
                           difficulty = ?, impact = ?, cve = ?, 
                           target_type = ?, requirements = ?, 
                           payloads = ?, rewards = ?, rarity = ?, 
                           location_type = ?, location_id = ?
                       WHERE id = ? AND world_id = ?""",
                    (vulnerability_data["code_name"], vulnerability_data["description"],
                     vulnerability_data["vuln_type"], vulnerability_data["difficulty"],
                     vulnerability_data["impact"], vulnerability_data["cve"],
                     vulnerability_data["target_type"], vulnerability_data["requirements"],
                     vulnerability_data["payloads"], vulnerability_data["rewards"],
                     vulnerability_data["rarity"], vulnerability_data["location_type"],
                     vulnerability_data["location_id"], vulnerability_id, self.world_id)
                )
                
                self.db.conn.commit()
                self.load_vulnerabilities()
                
                logger.info(f"Vulnu00e9rabilitu00e9 modifiu00e9e: {vulnerability_data['code_name']}")
                
            except Exception as e:
                self.db.conn.rollback()
                logger.error(f"Erreur lors de la modification de la vulnu00e9rabilitu00e9: {str(e)}")
                QMessageBox.critical(self, "Erreur", f"Impossible de modifier la vulnu00e9rabilitu00e9: {str(e)}")
    
    def delete_vulnerability(self):
        """Supprime une vulnu00e9rabilitu00e9"""
        selected_items = self.vulnerability_list.selectedItems()
        if not selected_items:
            return
            
        vulnerability_id = selected_items[0].data(Qt.ItemDataRole.UserRole)
        vulnerability_name = selected_items[0].text().split(' (')[0]
        
        reply = QMessageBox.question(
            self, "Confirmation",
            f"Voulez-vous vraiment supprimer la vulnu00e9rabilitu00e9 '{vulnerability_name}' ?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            try:
                cursor = self.db.conn.cursor()
                cursor.execute(
                    "DELETE FROM vulnerabilities WHERE id = ? AND world_id = ?",
                    (vulnerability_id, self.world_id)
                )
                
                self.db.conn.commit()
                self.load_vulnerabilities()
                
                self.edit_button.setEnabled(False)
                self.delete_button.setEnabled(False)
                
                logger.info(f"Vulnu00e9rabilitu00e9 supprimu00e9e: {vulnerability_name}")
                
            except Exception as e:
                self.db.conn.rollback()
                logger.error(f"Erreur lors de la suppression de la vulnu00e9rabilitu00e9: {str(e)}")
                QMessageBox.critical(self, "Erreur", f"Impossible de supprimer la vulnu00e9rabilitu00e9: {str(e)}")
